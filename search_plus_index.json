{"./":{"url":"./","title":"Introduction","keywords":"","body":"notes 工具笔记 Copyright © Zhi2014 2023 all right reserved，powered by Gitbook该文件修订时间： 2023-01-03 18:09:26 "},"command/command.html":{"url":"command/command.html","title":"命令工具","keywords":"","body":"日常工具 Copyright © Zhi2014 2023 all right reserved，powered by Gitbook该文件修订时间： 2023-01-03 18:09:26 "},"command/git/git.html":{"url":"command/git/git.html","title":"git","keywords":"","body":"git git-文档参考 git官网：https://git-scm.com/ git window 中文镜像下载： https://npm.taobao.org/mirrors/git-for-windows/ git常用命令速查表：https://www.w3cschool.cn/git/git-cheat-sheet.html git安装 Mac 安装 brew install git Ubuntu安装 sudo apt-get install git git-ssh-key 生成步骤 git config --global user.name \"xx\" git config --global user.email \"xx@xx.com\" git config --list # 使用rsa生成 ssh-keygen -t rsa -C \"邮箱\" # 使用ed25519生成 ssh-keygen -t ed25519 -C \"邮箱\" # 不使用邮箱（使用这个） ssh-keygen -t rsa # 查看 cat ~/.ssh/id_rsa.pub # 添加 ssh-add ~/.ssh/id_rsa # 验证 ssh -T git@github.com git-常用命令 命令 含义 创建 git init 初始化本地git仓库，使用当前目录作为git仓库 git init xx_name 使用指定名称作为git仓库 git clone xx.git 克隆远程仓库 提交历史记录 git log 显示日志 git show commit_id 显示某个提交的详细内容 git blame xx_filename 在每一行显示commit号 本地更改 git status 查看当前版本状态+是否修改 git diff 查看所有变更 git diff xx_file_name 查看具体文件变更 git add x.txt 添加单一文件到缓存 git add --all 添加全部文件到缓存 git commit -m \"commit info\" 提交 git commit -am \"commit info\" 将add和commit合为一步 分支和标签 git branch 显示本地分支 git branch -v 查看分支-带有最后提交信息 git branch -d xx_branch_name 删除分支 git checkout xx_branch_name 切换到指定分支 git checkout -b xx_branch_name 新建并切换到新的分支 git checkout xx_file_name 丢弃本地更改信息 git tag xx_tag_name 给当前分支打标签 更新和发布 git remote -v 查看远程分支详细信息 git remote show xx_branch_name 查看某个分支信息 git remote add origin xxx.git 添加一个新的远程仓库 git fetch origin xx_branch_name 获取远程分支，但不更新本地分支，另外需要merge操作 git pull origin xx_branch_name 获取远程分支，并更新本地分支 git push origin xx_branch_name 推送本地分支到远程分支 git push origin --delete xx_branch_name 删除远程分支 git push --tags 推送本地标签 撤销 git reset --hard 将当前版本重置为HEAD git reset --hard commit_id 将当前版本重置为指定commit_id git reset --soft HEAD^ 撤销当前已经提交的commit git revert commit_id 撤销提交 合并 git merge xx_branch_name 合并分支到当前分支，2个分支 git merge --abort 回到执行merge之前 git rebase xx_branch_name 合并分支到当前分支，1个分支 git rebase --abort 回到执行rebase之前 配置 git config --list 显示当前的git配置 git config --global user.name \"xx\" 设置全局的user.name信息 git config --global user.email \"xx\" 设置全局的user.email信息 git-gui sourcetree官网：https://www.sourcetreeapp.com/ git-问题解决 OpenSSL SSL_connect报错 问题描述：OpenSSL SSL_connect: Connection was reset in connection to github.com:443 问题解决 git config --global http.sslVerify false Copyright © Zhi2014 2023 all right reserved，powered by Gitbook该文件修订时间： 2023-01-03 18:09:26 "},"command/curl/curl.html":{"url":"command/curl/curl.html","title":"curl","keywords":"","body":"curl curl-文档参考 curl 的用法指南 curl-安装 curl-参数解释 curl-使用示例 curl -o /dev/null -s -w \"\\n\"HTTP返回码：%{http_code}\"\\n\"对端IP地址：%{remote_ip}\"\\n\"应用建连时间：%{time_appconnect}\"\\n\"TCP连接时间：%{time_connect}\"\\n\"DNS解析时间：%{time_namelookup}\"\\n\"准备传输时间：%{time_pretransfer}\"\\n\"开始传输时间：%{time_starttransfer}\"\\n\"\"\\n\"总时间：%{time_total}\"\\n\" \\ www.baidu.com # 输出 示例 HTTP返回码：200 对端IP地址：110.242.68.4 应用建连时间：0.000000 TCP连接时间：0.021064 DNS解析时间：0.008310 准备传输时间：0.021111 开始传输时间：0.034913 总时间：0.035058 Copyright © Zhi2014 2023 all right reserved，powered by Gitbook该文件修订时间： 2023-01-03 18:09:26 "},"command/wget/wget.html":{"url":"command/wget/wget.html","title":"wget","keywords":"","body":"wget wget-安装 mac 安装 brew install wget Copyright © Zhi2014 2023 all right reserved，powered by Gitbook该文件修订时间： 2023-01-03 18:09:26 "},"command/tree/tree.html":{"url":"command/tree/tree.html","title":"tree","keywords":"","body":"tree tree-文档参考 tree-安装 Mac安装 brew install tree tree-常用指令 指令 含义 tree -a 显示所有文件和目录 tree -d 显示目录名称而非内容 tree -L 2 显示几层 Copyright © Zhi2014 2023 all right reserved，powered by Gitbook该文件修订时间： 2023-01-03 18:09:26 "},"command/netstat/netstat.html":{"url":"command/netstat/netstat.html","title":"netstat","keywords":"","body":"netstat netstat-文档参考 netstat-安装 mac安装 Copyright © Zhi2014 2023 all right reserved，powered by Gitbook该文件修订时间： 2023-01-03 18:09:26 "},"command/telnet/telnet.html":{"url":"command/telnet/telnet.html","title":"telnet","keywords":"","body":"telnet telnet-文档参考 telnet-安装 mac安装 brew install telnet telnet-常用命令 命令 含义 telnet -v 查看版本 telnet-参数说明 参数 含义 telnet -v 查看版本 Copyright © Zhi2014 2023 all right reserved，powered by Gitbook该文件修订时间： 2023-01-03 18:09:26 "},"command/netcat/netcat.html":{"url":"command/netcat/netcat.html","title":"netcat","keywords":"","body":"netcat netcat-文档参考 netcat-安装 mac安装 brew install netcat Copyright © Zhi2014 2023 all right reserved，powered by Gitbook该文件修订时间： 2023-01-03 18:09:26 "},"command/ps/ps.html":{"url":"command/ps/ps.html","title":"ps","keywords":"","body":"ps Process Status ps-命令参数 命令 含义 ps -A 显示所有进程 ps-输出含义 字段 含义 USER 用户名称 UID 用户ID / User ID PID 进程ID / Process ID PPID 父进程的进程ID / Parent Process ID %CPU 进程的CPU占用率 %MEM 进程的内存占用率 TTY 与进程关联的终端 tty TIME 进程使用的总CPU时间 COMMAND 正在执行的命令行命令 ps-常用命令 命令 含义 ps ps -ef 显示出linux机器所有详细的进程信息 ps -ef | grep xx 查找特定进程 ps -u xxx 查看指定用户进程：ps -u root Copyright © Zhi2014 2023 all right reserved，powered by Gitbook该文件修订时间： 2023-01-03 18:09:26 "},"command/top/top.html":{"url":"command/top/top.html","title":"top","keywords":"","body":"top top-使用 top top-linux交互参数 top-mac交互参数 参数 含义 q 退出top m 切换显示内存信息 P 根据CPU使用百分比大小进行排序 top-常用命令 top-指标含义 Copyright © Zhi2014 2023 all right reserved，powered by Gitbook该文件修订时间： 2023-01-03 18:09:26 "},"command/supervisor/supervisor.html":{"url":"command/supervisor/supervisor.html","title":"supervisor","keywords":"","body":"supervisor supervisor-文档参考 supervisord 是 server 端。 supervisorctl 是 client 端。 supervisor-安装 mac安装 ubuntu安装 sudo apt-get install supervisor supervisorctl-常用命令 命令 含义 supervisorctl start xxx 启动进程 supervisorctl restart xxx 重启进程 supervisorctl stop group 停止所有属于名为group的分组进程 supervisorctl stop all 停止全部进程 supervisorctl reload 载入最新配置的文件 supervisorctl update 根据最新的配置文件，启动新配置或有改动的进程 supervisor-conf配置文件 创建文件，写入配置 cd /etc/supervisor/conf.d/ sudo touch test.conf [program:test] command=sh /usr/local/bin/test.sh ;被监控的进程路径 numprocs=1 ; 启动一个进程 directory=/usr/local/bin/ ;执行前切换路径 autostart=true ; 随着supervisord的启动而启动 autorestart=true ; 自动重启 startretries=10 ; 启动失败时的最多重试次数 exitcodes=0 ; 正常退出代码 stopsignal=KILL ; 用来杀死进程的信号 stopwaitsecs=10 ; 发送SIGKILL前的等待时间 redirect_stderr=true ; 重定向stderr到stdout stdout_logfile=logfile ; 指定日志文件 配置项解释 命令 解释 示例 autorestart 程序异常退出后自动重启 autorestart=True autostart 在 supervisord 启动的时候也自动启动 autostart=True Copyright © Zhi2014 2023 all right reserved，powered by Gitbook该文件修订时间： 2023-01-03 18:09:26 "},"tool/tool.html":{"url":"tool/tool.html","title":"开发工具","keywords":"","body":"开发工具 gitbook postman vscode switchHosts charles Copyright © Zhi2014 2023 all right reserved，powered by Gitbook该文件修订时间： 2023-01-03 18:09:26 "},"tool/gitbook/gitbook.html":{"url":"tool/gitbook/gitbook.html","title":"gitbook","keywords":"","body":"gitbook gitbook-文档参考 Mac中安装和使用GitBook gitbook 发布 github pages gitbook-安装 Mac安装 使用安装包安装node.js(官网: https://nodejs.org/en/) # 查看版本号 node -v 安装gitbook - 安装gitbook sudo npm install gitbook-cli -g # 查看版本号 - 初始化项目 gitbook -V 使用gitbook # 初始化 gitbook init # 运行项目 gitbook serve # 本地访问 http://localhost:4000 gitbook-常用命令 命令 含义 gitbook -V 查看版本 gitbook init 初始化gitbook gitbook serve 本地运行gitbook服务，默认端口4000 gitbook install 插件安装 gitbook build 生成html gitbook-常用插件 插件 说明 back-to-top-button 返回顶部 chapter-fold code 代码添加行号&复制按钮 copy-code-button 代码复制按钮 search 默认搜索（不支持中文） search-pro 高级搜索（支持中文，关闭 -lunr、-search） splitter 侧边栏宽度调整 tbfed-pagefooter 页面添加页脚 gitbook-常见主题 插件 说明 theme-default 默认主题 theme-comscore 彩色标题 Copyright © Zhi2014 2023 all right reserved，powered by Gitbook该文件修订时间： 2023-01-03 18:09:26 "},"tool/postman/postman.html":{"url":"tool/postman/postman.html","title":"postman","keywords":"","body":"postman postman--文档参考 postman-安装 官网下载 https://www.postman.com/downloads/ Copyright © Zhi2014 2023 all right reserved，powered by Gitbook该文件修订时间： 2023-01-03 18:09:26 "},"tool/vscode/vscode.html":{"url":"tool/vscode/vscode.html","title":"vscode","keywords":"","body":"Copyright © Zhi2014 2023 all right reserved，powered by Gitbook该文件修订时间： 2023-01-03 18:09:26 "},"tool/vscode/vscode-install.html":{"url":"tool/vscode/vscode-install.html","title":"vscode-环境搭建","keywords":"","body":"vscode-安装教程 vscode-安装 https://code.visualstudio.com/ mac安装 Copyright © Zhi2014 2023 all right reserved，powered by Gitbook该文件修订时间： 2023-01-03 18:09:26 "},"tool/switchhosts/switchhosts.html":{"url":"tool/switchhosts/switchhosts.html","title":"switchhosts","keywords":"","body":"SwitchHosts SwitchHosts-文档参考 官网：https://swh.app/zh SwitchHosts-安装 mac安装 https://github.com/oldj/SwitchHosts/releases Copyright © Zhi2014 2023 all right reserved，powered by Gitbook该文件修订时间： 2023-01-03 18:09:26 "},"soft/soft.html":{"url":"soft/soft.html","title":"开发软件","keywords":"","body":"常用软件 docker k8s grafana prometheus nacos etcd consul grpc Copyright © Zhi2014 2023 all right reserved，powered by Gitbook该文件修订时间： 2023-01-03 18:09:26 "},"soft/docker/docker.html":{"url":"soft/docker/docker.html","title":"docker","keywords":"","body":"docker docker-文档参考 开始：https://www.docker.com/get-started 个人主页：https://hub.docker.com/ docker-常用命令 命令 含义 docker help 查看帮助 docker version 展示docker版本信息。 docker info 显示系统范围的信息。 docker ps 列出容器。 docker ps -a 列出容器。 -a：显示所有的容器，包括未运行的。 docker search xx 从Docker Hub查找镜像。 docker pull xx Management Commands: app* Docker App (Docker Inc., v0.9.1-beta3) builder Manage builds buildx* Build with BuildKit (Docker Inc., v0.5.1-docker) config Manage Docker configs container Manage containers context Manage contexts image Manage images manifest Manage Docker image manifests and manifest lists network Manage networks node Manage Swarm nodes plugin Manage plugins scan* Docker Scan (Docker Inc., v0.5.0) secret Manage Docker secrets service Manage services stack Manage Docker stacks swarm Manage Swarm system Manage Docker trust Manage trust on Docker images volume Manage volumes Commands: attach Attach local standard input, output, and error streams to a running container build Build an image from a Dockerfile commit Create a new image from a container's changes cp Copy files/folders between a container and the local filesystem create Create a new container diff Inspect changes to files or directories on a container's filesystem events Get real time events from the server exec Run a command in a running container export Export a container's filesystem as a tar archive history Show the history of an image images List images import Import the contents from a tarball to create a filesystem image info Display system-wide information inspect Return low-level information on Docker objects kill Kill one or more running containers load Load an image from a tar archive or STDIN login Log in to a Docker registry logout Log out from a Docker registry logs Fetch the logs of a container pause Pause all processes within one or more containers port List port mappings or a specific mapping for the container ps List containers pull Pull an image or a repository from a registry push Push an image or a repository to a registry rename Rename a container restart Restart one or more containers rm Remove one or more containers rmi Remove one or more images run Run a command in a new container save Save one or more images to a tar archive (streamed to STDOUT by default) search Search the Docker Hub for images start Start one or more stopped containers stats Display a live stream of container(s) resource usage statistics stop Stop one or more running containers tag Create a tag TARGET_IMAGE that refers to SOURCE_IMAGE top Display the running processes of a container unpause Unpause all processes within one or more containers update Update configuration of one or more containers version Show the Docker version information wait Block until one or more containers stop, then print their exit codes Copyright © Zhi2014 2023 all right reserved，powered by Gitbook该文件修订时间： 2023-01-03 18:09:26 "},"soft/docker/docker-install.html":{"url":"soft/docker/docker-install.html","title":"docker-环境搭建","keywords":"","body":"docker-安装教程 docker-安装 mac安装 mac M1安装 https://docs.docker.com/desktop/mac/apple-silicon/ Ubuntu安装 # 更新ap包 sudo apt-get update # 安装 curl -fsSL https://get.docker.com | bash -s docker --mirror Aliyun # 测试 docker run hello-world docker-compose-安装 ubuntu安装 # 查看版本：https://github.com/docker/compose/releases # 下载 curl -L https://github.com/docker/compose/releases/download/1.29.2/docker-compose-`uname -s`-`uname -m` -o /usr/local/bin/docker-compose sudo chmod +x /usr/local/bin/docker-compose docker-compose --version Copyright © Zhi2014 2023 all right reserved，powered by Gitbook该文件修订时间： 2023-01-03 18:09:26 "},"soft/k8s/k8s.html":{"url":"soft/k8s/k8s.html","title":"k8s","keywords":"","body":"k8s Copyright © Zhi2014 2023 all right reserved，powered by Gitbook该文件修订时间： 2023-01-03 18:09:26 "},"soft/elasticsearch/elasticsearch.html":{"url":"soft/elasticsearch/elasticsearch.html","title":"elasticsearch","keywords":"","body":"elasticsearch Copyright © Zhi2014 2023 all right reserved，powered by Gitbook该文件修订时间： 2023-01-03 18:09:26 "},"soft/elasticsearch/elasticsearch-install.html":{"url":"soft/elasticsearch/elasticsearch-install.html","title":"elasticsearch-环境搭建","keywords":"","body":"elasticsearch-安装教程 Copyright © Zhi2014 2023 all right reserved，powered by Gitbook该文件修订时间： 2023-01-03 18:09:26 "},"soft/elasticsearch/elasticsearch-go.html":{"url":"soft/elasticsearch/elasticsearch-go.html","title":"elasticsearch-go","keywords":"","body":"go-elasticsearch 示例 建立默认连接 package main import ( \"log\" \"github.com/elastic/go-elasticsearch/v7\" ) func main() { es, _ := elasticsearch.NewDefaultClient() log.Println(es.Info()) } 建立自定义连接 package main import ( \"crypto/tls\" \"log\" \"net\" \"net/http\" \"time\" \"github.com/elastic/go-elasticsearch/v8\" ) func main() { log.SetFlags(0) cfg := elasticsearch.Config{ Addresses: []string{\"http://localhost:9200\"}, Transport: &http.Transport{ MaxIdleConnsPerHost: 10, ResponseHeaderTimeout: time.Millisecond, DialContext: (&net.Dialer{Timeout: time.Nanosecond}).DialContext, TLSClientConfig: &tls.Config{ MinVersion: tls.VersionTLS11, // ... }, }, } es, err := elasticsearch.NewClient(cfg) if err != nil { log.Printf(\"Error creating the client: %s\", err) } else { log.Println(es.Info()) // => dial tcp: i/o timeout } } Copyright © Zhi2014 2023 all right reserved，powered by Gitbook该文件修订时间： 2023-01-03 18:09:26 "},"soft/grafana/grafana.html":{"url":"soft/grafana/grafana.html","title":"grafana","keywords":"","body":"grafana grafana-文档参考 官网：https://grafana.com/ github：https://github.com/grafana/grafana docs：https://grafana.com/docs/grafana/latest/ dashboard：https://grafana.com/grafana/dashboards/ Copyright © Zhi2014 2023 all right reserved，powered by Gitbook该文件修订时间： 2023-01-03 18:09:26 "},"soft/grafana/grafana-install.html":{"url":"soft/grafana/grafana-install.html","title":"grafana-环境搭建","keywords":"","body":"grafana-安装教程 grafana-安装 教程地址：https://grafana.com/docs/grafana/latest/installation/debian/ https://grafana.com/grafana/download Ubuntu安装 wget https://dl.grafana.com/enterprise/release/grafana-enterprise-8.2.0.linux-amd64.tar.gz tar -zxvf grafana-enterprise-8.2.0.linux-amd64.tar.gz ./bin/grafana-server httpp://localhost:3000 Copyright © Zhi2014 2023 all right reserved，powered by Gitbook该文件修订时间： 2023-01-03 18:09:26 "},"soft/prometheus/prometheus.html":{"url":"soft/prometheus/prometheus.html","title":"prometheus","keywords":"","body":"prometheus prometheus-文档参考 Copyright © Zhi2014 2023 all right reserved，powered by Gitbook该文件修订时间： 2023-01-03 18:09:26 "},"soft/prometheus/prometheus-install.html":{"url":"soft/prometheus/prometheus-install.html","title":"prometheus-环境搭建","keywords":"","body":"prometheus-安装教程 prometheus-安装 ubuntu安装 # 访问：https://prometheus.io/download/ # 下载组件prometheus/prometheus：alertmanager-0.23.0.linux-amd64.tar.gz # 解压到目标文件夹：prometheus # 到目标文件夹中 # 启动： ./prometheus # 使用配置文件启动:配置prometheus.yml ./prometheus --config.file=prometheus.yml alertmanager-安装 Ubuntu安装 # 访问：https://prometheus.io/download/ # 下载组件prometheus/alertmanager：alertmanager-0.23.0.linux-amd64.tar.gz # 解压到目标文件夹：alertmanager # 到目标文件夹中 # 启动： ./alertmanager # 访问：http://localhost:9093/ # 使用配置文件启动:配置alertmanager.yml ./alertmanager --config.file=alertmanager.yml Copyright © Zhi2014 2023 all right reserved，powered by Gitbook该文件修订时间： 2023-01-03 18:09:26 "},"soft/nacos/nacos.html":{"url":"soft/nacos/nacos.html","title":"nacos","keywords":"","body":"nacos nacos-文档参考 官网：https://nacos.io/zh-cn/ github：https://github.com/alibaba/nacos 文档：https://nacos.io/zh-cn/docs/what-is-nacos.html golang SDK：https://github.com/nacos-group/nacos-sdk-go Copyright © Zhi2014 2023 all right reserved，powered by Gitbook该文件修订时间： 2023-01-03 18:09:26 "},"soft/nacos/nacos-go.html":{"url":"soft/nacos/nacos-go.html","title":"nacos-go","keywords":"","body":"nacos-go nacos-go 安装 go get -u github.com/nacos-group/nacos-sdk-go Copyright © Zhi2014 2023 all right reserved，powered by Gitbook该文件修订时间： 2023-01-03 18:09:26 "},"soft/etcd/etcd.html":{"url":"soft/etcd/etcd.html","title":"etcd","keywords":"","body":"etcd etcd-文档参考 github：https://github.com/etcd-io/etcd 文档：https://doczhcn.gitbook.io/etcd/ 官方文档：https://etcd.io/docs/v2.3/other_apis/ Copyright © Zhi2014 2023 all right reserved，powered by Gitbook该文件修订时间： 2023-01-03 18:09:26 "},"soft/etcd/etcd-install.html":{"url":"soft/etcd/etcd-install.html","title":"etcd-环境搭建","keywords":"","body":"etcd-安装教程 etcd-安装 mac 安装 # 安装 brew install etcd # 启动1:直接启动 /opt/homebrew/opt/etcd/bin/etcd # 启动2:后台启动 brew services start etcd # 启动3:直接启动 etcd # 端口被占用 sudo lsof -i :2380 kill -9 pid ubuntu安装 # 安装etcd sudo apt-get install etcd-server # 重启 service etcd restart # 输出 $ etcd -version etcd Version: 3.2.17 Git SHA: Not provided (use ./build instead of go build) Go Version: go1.10 Go OS/Arch: linux/amd64 # 安装etcdctl sudo apt-get install etcd-client # 输出版本 $ etcdctl -v etcdctl version: 3.2.17 API version: 2 # 重要：改为使用API version = 3 vim .bashrc export ETCDCTL_API=3 source .bashrc Copyright © Zhi2014 2023 all right reserved，powered by Gitbook该文件修订时间： 2023-01-03 18:09:26 "},"soft/etcd/etcd-etcdctl.html":{"url":"soft/etcd/etcd-etcdctl.html","title":"etcdctl","keywords":"","body":"etcdctl使用 etcdctl-文档参考 etcdctl-使用 注意：etcdctl_api 2和3的api数据不互通 API=2 export ETCDCTL_API=2 # 简单的增（更）-查-删 etcdctl put sam test etcdctl get sam etcdctl del sam # 前缀查询 etcdctl put /class/A/A1 01 etcdctl put /class/A/A2 02 etcdctl put /class/B/B1 04 etcdctl put /class/B/B2 04 etcdctl get /class --prefix etcdctl get /class/A --prefix # watch机制 etcdctl watch /class --prefix etcdctl put /class/A/A1 100 etcdctl put /class/C/C1 200 API=3 export ETCDCTL_API=2 # API version = 2 # 增删改查 etcdctl set sam test etcdctl get sam etcdctl update sam 200 etcdctl get sam # 成员查看 etcdctl member list Copyright © Zhi2014 2023 all right reserved，powered by Gitbook该文件修订时间： 2023-01-03 18:09:26 "},"soft/consul/consul.html":{"url":"soft/consul/consul.html","title":"consul","keywords":"","body":"Copyright © Zhi2014 2023 all right reserved，powered by Gitbook该文件修订时间： 2023-01-03 18:09:26 "},"soft/consul/consul-install.html":{"url":"soft/consul/consul-install.html","title":"consul-环境搭建","keywords":"","body":"consul-安装教程 consul-安装 window安装 # 1、下载：https://www.consul.io/downloads # 2、解压： # 3、启动：启动consul agent # 4、测试：访问 http://localhost:8500/ # 可以把consul所在路径添加进环境变量。 # 默认方式1 使用localhoast ./consul.exe agent -dev # 方式2 指定本地IP ./consul.exe agent -dev -client 192.168.xx.x # 方式3 window10开机启动 sc.exe create \"Consul_1.9.3\" binPath=\"C:\\shell\\consul.exe agent -dev\" sc.exe delete \"Consul_1.9.3\" # 删除服务 sc.exe start \"Consul_1.9.3\" # 启动服务 Copyright © Zhi2014 2023 all right reserved，powered by Gitbook该文件修订时间： 2023-01-03 18:09:26 "},"soft/grpc/grpc.html":{"url":"soft/grpc/grpc.html","title":"grpc","keywords":"","body":"grpc grpc-文档参考 网站 官网：https://www.grpc.io/ awesome-grpc：https://github.com/grpc-ecosystem/awesome-grpc 官方文档-go：https://grpc.io/docs/languages/go/ github：https://github.com/grpc/grpc-go 中间件 https://github.com/grpc-ecosystem/go-grpc-middleware 限流器：https://github.com/grpc-ecosystem/go-grpc-middleware/blob/master/ratelimit/ratelimit.go 文章：https://eddycjy.com/posts/go/grpc/2018-10-10-interceptor/ 书籍/教程 https://www.selinux.tech/golang/grpc https://www.cnblogs.com/FireworksEasyCool/category/1693727.html https://github.com/Bingjian-Zhu/go-grpc-example gRPC与云原生应用开发 https://grpc-up-and-running.github.io/ 示例代码：https://github.com/grpc-up-and-running/samples grpc-组件之间的关系 grpc-错误码 grpc-基础概念 基础通信模式（4种） No. 模式 解释 01 一元RPC 简单RPC模式。 02 服务端流RPC 客户端1条消息+服务端流序列。 03 客户端流RPC 客户端流序列+服务端1条消息。 04 双向流RPC 客户端流序列+服务端流序列。 多路复用 单个客户端 存根 使用gRPC客户端连接，还允许在同一个gRPC服务器端运行多个gRPC服务。 也允许多个客户端 存根 使用同一个gRPC客户端连接。 这个功能叫做 多路复用。 元数据 metadata：在客户端和服务端之间传递信息。 负载均衡 负载均衡器代理：客户端与服务器之间存在 1个负载均衡器，客户端请求负载均衡器；服务器将负载情况报告给负载均衡器。 客户端负载均衡：客户端层面做负载均衡。 轮询调度算法（round-robin algorithm）: pick_first（第一个成功地址），round_robin（轮询）。 grpc-常用拦截器 功能：认证、日志、消息、校验、重试、监控 分类 拦截器 介绍 认证 grpc_auth 可自定义的认证中间件 日志 grpc_ctxtags 添加Tag map到上下文的库 grpc_zap 将zap日志库集成到grpc handler中 grpc_logrus 将logrus日志库集成到grpc handler中 监控 grpc_prometheus prometheus 客户端和服务端的监控中间件 grpc_opentracing 重试 grpc_retry 客户端：gRPC响应码重试机制 验证 grpc_validator 服务端：根据.proto选项生成入站消息校验 grpc_recovery 服务端：将panic转换为gRPC错误 ratelimit 服务端：限制gRPC的速度 grpc-常用错误码 错误码 数字 描述 ok 0 成功状态 cancelled 1 操作已被（调用者）取消 unknown 2 未知错误 invalid_argument 3 客户端指定了非法参数 deadline_exceeded 4 在操作完成前，就已超过了截止时间 not_found 5 某些请求实体没有找到 already_exists 6 客户端试图创建的实体已经存在 permission_denied 7 调用者没有权限执行特定的操作 resource_exhausted 8 某些资源已经被耗尽 failed_precondition 9 操作被拒绝，系统没有处于执行操作所需的状态 aborted 10 操作被中止 out_of_range 11 尝试进行的操作超出了合法的范围 unimplemented 12 在该服务中，未实现或不支持本操作 internal 13 内部错误 unavailable 14 该服务当前不可用 data_loss 15 不可恢复的数据丢失或损坏 unauthenticated 16 客户端没有进行操作的合法认证凭证 grpc-网关 github.com/grpc-ecosystem/grpc-gateway/protoc-gen-grpc-gateway github.com/grpc-ecosystem/grpc-gateway/protoc-gen-swagger import \"google/api/annotations.proto\"; rpc add() returns () { option (google.api.http) = { post: \"/v1/product\" body: \"*\" }; } Copyright © Zhi2014 2023 all right reserved，powered by Gitbook该文件修订时间： 2023-01-03 18:09:26 "},"soft/grpc/grpc-install.html":{"url":"soft/grpc/grpc-install.html","title":"grpc-环境搭建","keywords":"","body":"grpc-安装教程 go-安装 # 直接go get go get -u google.golang.org/grpc # clone git clone https://github.com/grpc/grpc.git Copyright © Zhi2014 2023 all right reserved，powered by Gitbook该文件修订时间： 2023-01-03 18:09:26 "},"soft/grpc/grpc-protoc.html":{"url":"soft/grpc/grpc-protoc.html","title":"grpc-protoc","keywords":"","body":"protoc protoc-文档参考 protoc-安装教程 下载地址：https://github.com/protocolbuffers/protobuf/releases 安装步骤 选择对应的版本下载，解压后移动到可执行目录。 移动到$GOPATH/bin目录下或者/usr/local/bin。 # Ubuntu mv protoc /usr/local/bin/ # 测试 protoc --version libprotoc 3.17.1 protoc-使用 -I / --proto_path：指定源proto文件和依赖的proto文件的目录路径 指定希望编译的proto文件路径 指定生成的代码要存放的目标目录 ```bash protoc -I xx ABC/DEF/proto --go_out=plugins=grpc:/xxx protoc -I xx \\ ABC/DEF/proto \\ --go_out=plugins=grpc:/xxx ``` Copyright © Zhi2014 2023 all right reserved，powered by Gitbook该文件修订时间： 2023-01-03 18:09:26 "},"soft/grpc/grpc-protoc-gen-go.html":{"url":"soft/grpc/grpc-protoc-gen-go.html","title":"grpc-protoc-gen-go","keywords":"","body":"protoc-gen-go protoc-gen-go-安装教程 # 安装 # 自动安装到$GOPATH/bin目录下。 go get -u github.com/golang/protobuf/protoc-gen-go # 获取protobuf go接口模块 go get -u github.com/golang/protobuf/proto # 执行 protoc-gen-go # 输出 this program should be run by protoc, not directly Copyright © Zhi2014 2023 all right reserved，powered by Gitbook该文件修订时间： 2023-01-03 18:09:26 "},"soft/grpc/grpc-tool-ghz.html":{"url":"soft/grpc/grpc-tool-ghz.html","title":"grpc-ghz","keywords":"","body":"ghz 基准测试和负载测试工具 ghz-文档参考 官网：https://ghz.sh/ github：https://github.com/bojand/ghz 教程： https://lixueduan.com/post/grpc/10-benchmark/ ghz-安装 git clone https://github.com/bojand/ghz cd ghz make build cd cmd/ghz go build #【可选】 mv ghz /usr/local/bin/ ghz -version ghz-使用 # 测试 ghz --insecure \\ --proto ./hello.proto \\ --call Service.Ping \\ -d '{\"request\": \"1111\"}' \\ -n 2000 \\ -c 20 \\ 127.0.0.1:8080 ghz-参数 -rps 每秒请求数 (RPS) -c 并发数 -n 总请求数 Copyright © Zhi2014 2023 all right reserved，powered by Gitbook该文件修订时间： 2023-01-03 18:09:26 "},"soft/grpc/grpc-tool-grpcurl.html":{"url":"soft/grpc/grpc-tool-grpcurl.html","title":"grpc-grpcurl","keywords":"","body":"grpcurl grpcurl-文档参考 github：https://github.com/fullstorydev/grpcurl grpcurl-安装教程 # 安装 go get github.com/fullstorydev/grpcurl go install github.com/fullstorydev/grpcurl/cmd/grpcurl # grpcurl -version grpcurl-使用教程 grpcurl 127.0.0.1:12345 list # 错误解决 Failed to dial target host \"127.0.0.1:12345\": tls: first record does not look like a TLS handshake # 使用 -plaintext # 列出服务名称 grpcurl -plaintext 127.0.0.1:12345 list # 列出方法名称列表 grpcurl -plaintext 127.0.0.1:12345 list serviceName # 列出服务定义 grpcurl -plaintext 127.0.0.1: 12345 describe serviceName # 列出方法定义 grpcurl -plaintext 127.0.0.1: 12345 describe serviceName.methodName # 列出类型定义 # serviceName去除当前服务名称-1个级别 grpcurl -plaintext 127.0.0.1: 12345 describe serviceName.xxRequest # 调用 # 调用方法 grpcurl -d @ -plaintext 127.0.0.1: 12345 serviceName.methodName Copyright © Zhi2014 2023 all right reserved，powered by Gitbook该文件修订时间： 2023-01-03 18:09:26 "},"soft/grpc/grpc-tool-grpcui.html":{"url":"soft/grpc/grpc-tool-grpcui.html","title":"grpc-grpcui","keywords":"","body":"grpcui grpcui-安装教程 export GOPROXY=https://goproxy.cn go get github.com/fullstorydev/grpcui go install github.com/fullstorydev/grpcui/cmd/grpcui # 到go build生成的目录 cd go/bin/ chmod 777 grpcui sudo mv grpcui /usr/local/bin/ grpcui -help # 需要修改端口，指定端口即可 grpcui -plaintext 127.0.0.1:8080 Copyright © Zhi2014 2023 all right reserved，powered by Gitbook该文件修订时间： 2023-01-03 18:09:26 "},"soft/grpc/grpc-tool-grpcox.html":{"url":"soft/grpc/grpc-tool-grpcox.html","title":"grpc-grpcox","keywords":"","body":"grpcox grpcox-安装教程 github：https://github.com/gusaul/grpcox 安装 git clone https://github.com/gusaul/grpcox.git cd grpcox make start Copyright © Zhi2014 2023 all right reserved，powered by Gitbook该文件修订时间： 2023-01-03 18:09:26 "},"soft/grpc/grpc-tool-bloomrpc.html":{"url":"soft/grpc/grpc-tool-bloomrpc.html","title":"grpc-bloomrpc","keywords":"","body":"bloomrpc bloomrpc-文档参考 https://github.com/uw-labs/bloomrpc bloomrpc-安装教程 # 下载 https://github.com/uw-labs/bloomrpc/releases Copyright © Zhi2014 2023 all right reserved，powered by Gitbook该文件修订时间： 2023-01-03 18:09:26 "},"db/db.html":{"url":"db/db.html","title":"数据库","keywords":"","body":"数据库 Copyright © Zhi2014 2023 all right reserved，powered by Gitbook该文件修订时间： 2023-01-03 18:09:26 "},"db/redis/redis.html":{"url":"db/redis/redis.html","title":"redis","keywords":"","body":"redis redis-文档参考 官网：https://redis.com/ Redis命令参考：http://doc.redisfans.com/index.html http://redisdoc.com/ https://www.redis.net.cn/ Copyright © Zhi2014 2023 all right reserved，powered by Gitbook该文件修订时间： 2023-01-03 18:09:26 "},"db/redis/redis-install.html":{"url":"db/redis/redis-install.html","title":"redis-环境搭建","keywords":"","body":"redis-安装教程 redis-文档参考 redis-安装 mac安装 # brew 安装 brew install redis # 启动方式1：后台启动 brew services start redis # 启动方式2: /opt/homebrew/opt/redis/bin/redis-server /opt/homebrew/etc/redis.conf Ubuntu安装 安装 # apt-get 安装 sudo apt-get install redis-server 设置密码 # 设置密码 sudo vim /etc/redis/redis/redis.conf # 修改 配置文件里面的 requirepass，把注释删除 # 修改密码 # 重启 service redis restart 查看状态 # 检查redis服务器系统进程 ps -aux | grep redis # 检查redis服务器状态 netstat -nlt | grep 6379 Copyright © Zhi2014 2023 all right reserved，powered by Gitbook该文件修订时间： 2023-01-03 18:09:26 "},"db/redis/redis-cli.html":{"url":"db/redis/redis-cli.html","title":"redis-cli","keywords":"","body":"redis-cli redis-cli-参数示例 redis-cli-使用示例 简单示例 # 本地+没有密码 redis-cli # 本地+有密码 redis-cli -a password # 远程+有密码 redis-cli -h 192.168.1.x -p 6379 -a password 查看大key # 可能依赖于dbsize # 查看大key redis-cli --bigkeys # 查看大key：每扫描100个key休息0.1秒 redis-cli --bigkeys -i 0.1 清除数据 # 清除数据 redis-cli keys \"xx*\" | xargs redis-cli del 批量删除待空格的key redis-cli keys \"xx_*\" > a.txt awk '$0=\"redis-cli xx del \\\"\"$0\"\\\"\"' a.txt > cmd.txt chmod a+x cmd.txt ./cmd.txt Copyright © Zhi2014 2023 all right reserved，powered by Gitbook该文件修订时间： 2023-01-03 18:09:26 "},"db/redis/redis-gui.html":{"url":"db/redis/redis-gui.html","title":"redis-gui","keywords":"","body":"redis-GUI GUI软件目录 RDM：https://rdm.dev/ linux ubuntu redis 好用的可视化工具推荐：https://www.cnblogs.com/zhunong/p/13485513.html redis-desktop-manager Ubuntu安装 sudo snap install redis-desktop-manager # 使用 redis-desktop-manager.rdm Copyright © Zhi2014 2023 all right reserved，powered by Gitbook该文件修订时间： 2023-01-03 18:09:26 "},"db/redis/redis-go-redis.html":{"url":"db/redis/redis-go-redis.html","title":"redis-go-redis","keywords":"","body":"go-redis Copyright © Zhi2014 2023 all right reserved，powered by Gitbook该文件修订时间： 2023-01-03 18:09:26 "},"db/mysql/mysql.html":{"url":"db/mysql/mysql.html","title":"mysql","keywords":"","body":"Copyright © Zhi2014 2023 all right reserved，powered by Gitbook该文件修订时间： 2023-01-03 18:09:26 "},"db/mysql/mysql-install.html":{"url":"db/mysql/mysql-install.html","title":"mysql-环境搭建","keywords":"","body":"mysql-安装教程 mysql-文档参考 mysql-安装 mac安装 brew search mysql brew install mysql@5.7 echo 'export PATH=\"/opt/homebrew/opt/mysql@5.7/bin:$PATH\"' >> ~/.zshrc source .zshrc mysql --version window安装 # 下载：https://dev.mysql.com/downloads/installer/ Copyright © Zhi2014 2023 all right reserved，powered by Gitbook该文件修订时间： 2023-01-03 18:09:26 "},"db/mysql/mysql-gui.html":{"url":"db/mysql/mysql-gui.html","title":"mysql-gui","keywords":"","body":"mysql-GUI GUI软件目录 navicat-for-mysql 官网：http://www.navicat.com.cn/products/navicat-for-mysql ubuntu安装 # 下载 chmod +x navicat15-mysql-cs.AppImage ./navicat15-mysql-cs.AppImage sequelpro 官网：https://sequelpro.com/download mac安装 Copyright © Zhi2014 2023 all right reserved，powered by Gitbook该文件修订时间： 2023-01-03 18:09:26 "},"db/mysql/mysql-go-xorm.html":{"url":"db/mysql/mysql-go-xorm.html","title":"mysql-go-xorm","keywords":"","body":"go-xorm go-xorm-文档参考 https://github.com/go-xorm/xorm Copyright © Zhi2014 2023 all right reserved，powered by Gitbook该文件修订时间： 2023-01-03 18:09:26 "},"db/postgresql/postgresql.html":{"url":"db/postgresql/postgresql.html","title":"postgresql","keywords":"","body":"postgresql Copyright © Zhi2014 2023 all right reserved，powered by Gitbook该文件修订时间： 2023-01-03 18:09:26 "},"db/postgresql/postgresql-install.html":{"url":"db/postgresql/postgresql-install.html","title":"postgresql-环境搭建","keywords":"","body":"postgresql-安装教程 postgresql-安装 Ubuntu安装 sudo apt-get install postgresql postgresql-contrib pg_ctlcluster 12 main start sudo systemctl start postgresql@12-main # 查看pg状态 service postgresql status # 切换用户 sudo su postgres # 使用shell psql \\l # 查看现有的所有表 \\du # 查看postgresql 用户 Copyright © Zhi2014 2023 all right reserved，powered by Gitbook该文件修订时间： 2023-01-03 18:09:26 "},"db/postgresql/postgresql-gui.html":{"url":"db/postgresql/postgresql-gui.html","title":"postgresql-gui","keywords":"","body":"postgresql-gui postgresql-gui目录 pgadmin https://www.pgadmin.org/ ubuntu安装 # 安装 sudo apt install pgadmin3 # 运行 pgadmin3 Copyright © Zhi2014 2023 all right reserved，powered by Gitbook该文件修订时间： 2023-01-03 18:09:26 "},"mq/mq.html":{"url":"mq/mq.html","title":"消息队列","keywords":"","body":"Copyright © Zhi2014 2023 all right reserved，powered by Gitbook该文件修订时间： 2023-01-03 18:09:26 "},"mq/kafka/kafka.html":{"url":"mq/kafka/kafka.html","title":"kafka","keywords":"","body":"kafka kafka-文档参考 Sarama is a Go library for Apache Kafka：https://github.com/Shopify/sarama Copyright © Zhi2014 2023 all right reserved，powered by Gitbook该文件修订时间： 2023-01-03 18:09:26 "},"mq/rocketmq/rocketmq.html":{"url":"mq/rocketmq/rocketmq.html","title":"rocketmq","keywords":"","body":"rocket Copyright © Zhi2014 2023 all right reserved，powered by Gitbook该文件修订时间： 2023-01-03 18:09:26 "},"mq/rocketmq/rocketmq-install.html":{"url":"mq/rocketmq/rocketmq-install.html","title":"rocketmq-环境搭建","keywords":"","body":"rocketmq-安装教程 rocketmq-安装 window安装 # 1、下载： https://mirrors.tuna.tsinghua.edu.cn/apache/rocketmq/4.8.0/rocketmq-all-4.8.0-bin-release.zip # 2、解压： 解压到C:\\rocketmq ## 环境变量配置 ROCKETMQ_HOME=\"C:\\rocketmq\" NAMESRV_ADDR=\"localhost:9876\" docker安装 docker search rocketmq docker pull rocketmqinc/rocketmq # 启动Nameserver # 方式2 // https://blog.csdn.net/weixin_38836909/article/details/103985478 // -d: 后台运行容器，并返回容器ID； // -p: 指定端口映射，格式为：主机(宿主)端口:容器端口。 // --name=\"nginx-lb\": 为容器指定一个名称； $ docker run -d -p 9876:9876 \\ --name rmqserver \\ foxiswho/rocketmq:server-4.5.1 # 启动Broker # 对应上面方式2 // Broker容器中默认的配置文件的路径为：/etc/rocketmq/broker.conf $ docker run -d -p 10911:10911 -p 10909:10909 \\ --name rmqbroker \\ --link rmqserver:namesrv\\ -e \"NAMESRV_ADDR=namesrv:9876\"\\ -e \"JAVA_OPTS=-Duser.home=/opt\"\\ -e \"JAVA_OPT_EXT=-server -Xms128m -Xmx128m\"\\ foxiswho/rocketmq:broker-4.5.1 # 安装控制台 docker search rocketmq-console docker pull styletang/rocketmq-console-ng　 # 方式2 // 访问 http://localhost:8082/#/ $ docker run -d \\ --name rmqconsole \\ -p 8082:8080 \\ --link rmqserver:namesrv\\ -e \"JAVA_OPTS=-Drocketmq.namesrv.addr=namesrv:9876\\ -Dcom.rocketmq.sendMessageWithVIPChannel=false\"\\ -t styletang/rocketmq-console-ng Copyright © Zhi2014 2023 all right reserved，powered by Gitbook该文件修订时间： 2023-01-03 18:09:26 "},"go/go.html":{"url":"go/go.html","title":"go","keywords":"","body":"golang golang-文档参考 github官网：https://github.com/golang/go https://github.com/avelino/awesome-go go夜读：https://github.com/talkgo/read 教程/书籍 -《Go 编程基础》-无闻：https://github.com/unknwon/go-fundamental-programming 雨痕学习笔记：https://github.com/qyuhen/book 收集网络上的开发书籍（golang）：https://github.com/zhizouxiao/dev-books 框架 beego：https://github.com/beego/beego gopher大会 会议PPT：https://github.com/gopherchina/conference 开发工具 json=>go：https://mholt.github.io/json-to-go/ https://github.com/mholt/json-to-go 三方包 errors with stacktraces for go：https://github.com/go-errors/errors a cron library for go：https://github.com/robfig/cron Cron expression parser in Go language (golang)：https://github.com/gorhill/cronexpr Visualize call graph of a Go program using Graphviz：https://github.com/ofabry/go-callvis 日志 go-问题解决 golang.org/x/..包导入问题 解决思路：golang在github上建立了一个镜像库，下载github上的镜像库放入GOPATH下即可 mkdir -p $GOPATH/src/golang.org/x cd $GOPATH/src/golang.org/x git clone https://github.com/golang/sync.git git clone https://github.com/golang/crypto.git git clone https://github.com/golang/sys.git git clone https://github.com/golang/net.git git clone https://github.com/golang/time.git git clone https://github.com/golang/text.git git clone https://github.com/golang/term.git git clone https://github.com/golang/oauth2.git cd $GOPATH/src/google.golang.org git clone https://github.com/protocolbuffers/protobuf-go.git mv protobuf-go protobuf Copyright © Zhi2014 2023 all right reserved，powered by Gitbook该文件修订时间： 2023-01-03 18:09:26 "},"go/go-install.html":{"url":"go/go-install.html","title":"go-环境搭建","keywords":"","body":"golang-安装教程 golang-文档参考 golang-安装 官网下载：https://golang.org/dl/ https://www.cnblogs.com/00986014w/p/10001093.html https://cloud.tencent.com/developer/article/1623121mac安装 # M1芯片安装不了Go的14、15版本 # 直接下载：https://golang.org/dl/go1.16.5.darwin-arm64.pkg # 添加可执行文件到bashrc cd vim .bashrc export PATH=/usr/local/go/bin:$PATH export PATH=/Users/xx/shell:$PATH # 退出，保存 source .bashrc Ubuntu安装 # 方式1 # 下载 wget https://dl.google.com/go/go1.14.linux-amd64.tar.gz # 解压 tar zxvf go1.14.linux-amd64.tar.gz -C /usr/local # 方式2 # 安装在/usr/local/go目录下 # wget -c https://dl.google.com/go/go1.14.linux-amd64.tar.gz -O - | sudo tar -xz -C /usr/local Copyright © Zhi2014 2023 all right reserved，powered by Gitbook该文件修订时间： 2023-01-03 18:09:26 "},"go/go-mod.html":{"url":"go/go-mod.html","title":"go-mod","keywords":"","body":"go-mod go-mod-使用教程 开启GO111MODULE on：支持go mod模式 off：不支持go mod模式 auto (默认模式)： 如果代码在gopath下，则自动使用gopath模式； 如果代码不在gopath下，则自动使用go mod模式。 # 设置环境变量 go env -w GO111MODULE=on go env -w GO111MODULE=off go env -w GO111MODULE=auto go-proxy https://goproxy.cn https://goproxy.io https://proxy.golang.org $ go env -w GOPROXY=https://goproxy.cn,direct https://goproxy.cn,https://goproxy.io,direct go-mod-常用命令 命令 含义 go mod init xx 初始化xx项目（项目开始的时候使用） go mod download xx 下载modules到本地cache：$GOPATH/pkg/mod和 $GOPATH/pkg/sum 下 go mod tidy 删除不需要的依赖包，新增需要的依赖包 go mod vendor 拉取需要的依赖包，生成vendor目录 go mod graph 把模块之间的依赖图显示出来 go mod verify 校验依赖 go mod why 解释为什么需要依赖 go mod edit 编辑go.mod文件 go mod edit -fmt go.mod 格式化go.mod go mod edit -replace=xx@v1.1.=yy@latest 替换包源（使用后者替换前者） 其他相关命令 go clean -modcache 清理本地cache go get -u xx 更新依赖到最新版本 go get -u xx@v1.xxx.yy 更新到指定版本 go help mod 查看mod帮助 go help mod # 输出 Go mod provides access to operations on modules. Note that support for modules is built into all the go commands, not just 'go mod'. For example, day-to-day adding, removing, upgrading, and downgrading of dependencies should be done using 'go get'. See 'go help modules' for an overview of module functionality. Usage: go mod [arguments] The commands are: download download modules to local cache edit edit go.mod from tools or scripts graph print module requirement graph init initialize new module in current directory tidy add missing and remove unused modules vendor make vendored copy of dependencies verify verify dependencies have expected content why explain why packages or modules are needed Use \"go help mod \" for more information about a command. Copyright © Zhi2014 2023 all right reserved，powered by Gitbook该文件修订时间： 2023-01-03 18:09:26 "},"go/go-pprof.html":{"url":"go/go-pprof.html","title":"go-pprof","keywords":"","body":"go-pprof go-pprof-文档参考 go-pprof-安装 go-pprof-使用 go-pprof-指标含义 Copyright © Zhi2014 2023 all right reserved，powered by Gitbook该文件修订时间： 2023-01-03 18:09:26 "},"python/python.html":{"url":"python/python.html","title":"python","keywords":"","body":"python Copyright © Zhi2014 2023 all right reserved，powered by Gitbook该文件修订时间： 2023-01-03 18:09:26 "},"python/python-install.html":{"url":"python/python-install.html","title":"python-环境搭建","keywords":"","body":"python-安装教程 python-安装 ubuntu安装 # 查看python版本 ls -l /usr/bin/ | grep python # 查看pip版本 ls -l /usr/bin/ | grep pip # 安装pip3 sudo apt install python3-pip pip3 -V # 安装pip pip3 install --upgrade pip mac安装 brew search python3 brew install python@3.9 python3 -V window安装 https://www.python.org/downloads/windows/ Download Windows x86-64 executable installer 3.9.2版本：https://www.python.org/ftp/python/3.9.2/python-3.9.2-amd64.exe Copyright © Zhi2014 2023 all right reserved，powered by Gitbook该文件修订时间： 2023-01-03 18:09:26 "},"python/python-pip.html":{"url":"python/python-pip.html","title":"python-pip","keywords":"","body":"pip pip-安装教程 mac安装 sudo easy_install pip pip-常用命令 参数 含义 pip list 列出已经安装的包 pip list --outdate 检查哪些包需要更新 pip install xx 安装xx pip install --upgrade xx 升级包xx pip uninstall xx 卸载xx pip download xx 下载xx包 pip help 显示帮助 用法: pip [选项] 命令: install 安装软件包。 download 下载软件包。 uninstall 卸载程序包。 freeze Output installed packages in requirements format. list 列出已安装的软件包。 show 显示有关已安装程序包的信息。 check Verify installed packages have compatible dependencies. config 管理本地和全局配置。 search 在PyPI中搜索包。 cache Inspect and manage pip's wheel cache. wheel Build wheels from your requirements. hash 计算包存档的哈希值。 completion A helper command used for command completion. debug 显示对调试有用的信息。 help 显示命令的帮助。 General Options: -h, --help Show help. --isolated Run pip in an isolated mode, ignoring environment variables and user configuration. -v, --verbose Give more output. Option is additive, and can be used up to 3 times. -V, --version Show version and exit. -q, --quiet Give less output. Option is additive, and can be used up to 3 times (corresponding to WARNING, ERROR, and CRITICAL logging levels). --log Path to a verbose appending log. --no-input Disable prompting for input. --proxy Specify a proxy in the form [user:passwd@]proxy.server:port. --retries Maximum number of retries each connection should attempt (default 5 times). --timeout Set the socket timeout (default 15 seconds). --exists-action Default action when a path already exists: (s)witch, (i)gnore, (w)ipe, (b)ackup, (a)bort. --trusted-host Mark this host or host:port pair as trusted, even though it does not have valid or any HTTPS. --cert Path to alternate CA bundle. --client-cert Path to SSL client certificate, a single file containing the private key and the certificate in PEM format. --cache-dir Store the cache data in . --no-cache-dir 禁用缓存。 --disable-pip-version-check Don't periodically check PyPI to determine whether a new version of pip is available for download. Implied with --no-index. --no-color 禁止彩色输出。 --no-python-version-warning Silence deprecation warnings for upcoming unsupported Pythons. --use-feature Enable new functionality, that may be backward incompatible. --use-deprecated Enable deprecated functionality, that will be removed in the future. 英文 Usage: pip [options] Commands: install Install packages. download Download packages. uninstall Uninstall packages. freeze Output installed packages in requirements format. list List installed packages. show Show information about installed packages. check Verify installed packages have compatible dependencies. config Manage local and global configuration. search Search PyPI for packages. cache Inspect and manage pip's wheel cache. wheel Build wheels from your requirements. hash Compute hashes of package archives. completion A helper command used for command completion. debug Show information useful for debugging. help Show help for commands. General Options: -h, --help Show help. --isolated Run pip in an isolated mode, ignoring environment variables and user configuration. -v, --verbose Give more output. Option is additive, and can be used up to 3 times. -V, --version Show version and exit. -q, --quiet Give less output. Option is additive, and can be used up to 3 times (corresponding to WARNING, ERROR, and CRITICAL logging levels). --log Path to a verbose appending log. --no-input Disable prompting for input. --proxy Specify a proxy in the form [user:passwd@]proxy.server:port. --retries Maximum number of retries each connection should attempt (default 5 times). --timeout Set the socket timeout (default 15 seconds). --exists-action Default action when a path already exists: (s)witch, (i)gnore, (w)ipe, (b)ackup, (a)bort. --trusted-host Mark this host or host:port pair as trusted, even though it does not have valid or any HTTPS. --cert Path to alternate CA bundle. --client-cert Path to SSL client certificate, a single file containing the private key and the certificate in PEM format. --cache-dir Store the cache data in . --no-cache-dir Disable the cache. --disable-pip-version-check Don't periodically check PyPI to determine whether a new version of pip is available for download. Implied with --no-index. --no-color Suppress colored output. --no-python-version-warning Silence deprecation warnings for upcoming unsupported Pythons. --use-feature Enable new functionality, that may be backward incompatible. --use-deprecated Enable deprecated functionality, that will be removed in the future. Copyright © Zhi2014 2023 all right reserved，powered by Gitbook该文件修订时间： 2023-01-03 18:09:26 "},"python/python-jupyter.html":{"url":"python/python-jupyter.html","title":"python-jupyter","keywords":"","body":"jupyter jupyter-文档参考 官网：https://jupyter.org/ 参考：https://www.cnblogs.com/xiaoqi/p/6393677.html https://www.cnblogs.com/faramita2016/p/7512471.html jupyter-安装教程 Ubuntu安装 # 前提安装pip3 #使用pip3安装 jupyter pip3 install jupyter # 添加.bashrc vim .bashrc export PATH=$PATH:~/.local/bin source .bashrc # 进入指定目录，运行jupyter mkdir jnote cd jnote jupyter notebook # 访问 http://localhost:8888/ # 可选 # 安装matplotlib包 python3 -m pip install matplotlib Copyright © Zhi2014 2023 all right reserved，powered by Gitbook该文件修订时间： 2023-01-03 18:09:26 "},"nodejs/nodejs.html":{"url":"nodejs/nodejs.html","title":"nodejs","keywords":"","body":"nodejs Copyright © Zhi2014 2023 all right reserved，powered by Gitbook该文件修订时间： 2023-01-03 18:09:26 "},"nodejs/nodejs-install.html":{"url":"nodejs/nodejs-install.html","title":"nodejs-环境搭建","keywords":"","body":"nodejs-安装教程 nodejs-安装 http://nodejs.cn/download/ mac 安装 下载安装包 window 安装 下载安装包 安装路径： C:\\Program Files\\nodejs\\ Copyright © Zhi2014 2023 all right reserved，powered by Gitbook该文件修订时间： 2023-01-03 18:09:26 "},"nodejs/nvm.html":{"url":"nodejs/nvm.html","title":"nvm","keywords":"","body":"nvm nvm-文档参考 https://github.com/coreybutler/nvm-windows nvm-安装 window安装 https://www.cnblogs.com/jing-tian/p/11225123.html # 下载：https://github.com/coreybutler/nvm-windows/releases # 文件：nvm-setup.zip nvm-命令参数 nvm-使用教程 nvm -v nvm install 12 nvm use 12 Copyright © Zhi2014 2023 all right reserved，powered by Gitbook该文件修订时间： 2023-01-03 18:09:26 "},"php/php.html":{"url":"php/php.html","title":"php","keywords":"","body":"php Copyright © Zhi2014 2023 all right reserved，powered by Gitbook该文件修订时间： 2023-01-03 18:09:26 "},"php/php-install.html":{"url":"php/php-install.html","title":"php-环境搭建","keywords":"","body":"php-安装教程 php-安装 mac安装 brew search php brew install php@8.0 echo 'export PATH=\"/opt/homebrew/opt/php@8.0/bin:$PATH\"' >> ~/.zshrc echo 'export PATH=\"/opt/homebrew/opt/php@8.0/sbin:$PATH\"' >> ~/.zshrc source .zshrc php --version # 方法2 brew tap shivammathur/php brew search php brew install shivammathur/php/php@7.0 Copyright © Zhi2014 2023 all right reserved，powered by Gitbook该文件修订时间： 2023-01-03 18:09:26 "},"php/php-compose.html":{"url":"php/php-compose.html","title":"php-compose","keywords":"","body":"php-compose php-compose安装教程 ubuntu安装 sudo apt-get install composer composer -V composer install composer help mac安装 curl -sS https://getcomposer.org/installer | php php composer.phar mv composer.phar /usr/local/bin/composer Copyright © Zhi2014 2023 all right reserved，powered by Gitbook该文件修订时间： 2023-01-03 18:09:26 "},"php/php-cs.html":{"url":"php/php-cs.html","title":"php-cs","keywords":"","body":"php-cs php-cs-安装教程 ubuntu安装 php_cs https://www.cnblogs.com/zgaspnet/p/13678180.html wget https://cs.symfony.com/download/php-cs-fixer-v2.phar -O php-cs-fixer chmod +x php-cs-fixer mv php-cs-fixer /usr/local/bin/ # Tools->External Tools Program：/usr/local/bin/php-cs-fixer Arguments：fix \"$FileDir$/$FileName$\" --config=.php_cs --using-cache=no Working directory：$ProjectFileDir$ /usr/local/bin/php-cs-fixer fix /xx/xx.php --config=.php_cs --using-cache=no Copyright © Zhi2014 2023 all right reserved，powered by Gitbook该文件修订时间： 2023-01-03 18:09:26 "},"mac/mac.html":{"url":"mac/mac.html","title":"mac","keywords":"","body":"mac xcode brew iterm2 on my Zsh dash(收费) Copyright © Zhi2014 2023 all right reserved，powered by Gitbook该文件修订时间： 2023-01-03 18:09:26 "},"mac/mac-shortcut.html":{"url":"mac/mac-shortcut.html","title":"快捷键","keywords":"","body":"mac快捷键 mac快捷键 Command + Shift + . 查看隐藏文件夹 Copyright © Zhi2014 2023 all right reserved，powered by Gitbook该文件修订时间： 2023-01-03 18:09:26 "},"mac/xcode/xcode.html":{"url":"mac/xcode/xcode.html","title":"xcode","keywords":"","body":"xcode xcode Command Line Tools-安装 mac安装 xcode-select --install Copyright © Zhi2014 2023 all right reserved，powered by Gitbook该文件修订时间： 2023-01-03 18:09:26 "},"mac/brew/brew.html":{"url":"mac/brew/brew.html","title":"brew","keywords":"","body":"brew brew-文档参考 官网：https://brew.sh/ brew-安装 mac安装 # 1.执行脚本 /bin/bash -c \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)\" # 2.写入path .bashrc = /opt/homebrew/bin export PATH=/opt/homebrew/bin:$PATH source .bashrc # 添加进.zlogin if [ -f ~/.bashrc ]; then source ~/.bashrc fi source .zlogin 安装目录 # cd /usr/local/Cellar brew-常用命令 命令 brew search brew info brew install brew update brew upgrade brew uninstall brew list brew config brew Copyright © Zhi2014 2023 all right reserved，powered by Gitbook该文件修订时间： 2023-01-03 18:09:26 "},"mac/iterm2/iterm2.html":{"url":"mac/iterm2/iterm2.html","title":"iterm2","keywords":"","body":"item2 item2-安装 mac 安装 下载安装即可：https://iterm2.com/ item2-设置 Copyright © Zhi2014 2023 all right reserved，powered by Gitbook该文件修订时间： 2023-01-03 18:09:26 "},"mac/onmyzsh/onmyzsh.html":{"url":"mac/onmyzsh/onmyzsh.html","title":"onmyzsh","keywords":"","body":"onmyzsh onmyzsh-文档参考 官网：https://ohmyz.sh/ onmyzsh-安装 mac安装 sh -c \"$(curl -fsSL https://raw.github.com/ohmyzsh/ohmyzsh/master/tools/install.sh)\" onmyzsh-常用插件-官方 插件列表：https://github.com/ohmyzsh/ohmyzsh/tree/master/plugins 插件 解释 git 【常用】git 命令别名 golang 【常用】go命令别名 onmyzsh-常用插件-社区 https://github.com/orgs/zsh-users/repositories?type=all 插件 解释 zsh-autosuggestions zsh-syntax-highlighting 语法高亮 onmyzsh-插件安装 cd ~/.oh-my-zsh/custom/plugins git clone https://github.com/zsh-users/zsh-autosuggestions.git git clone https://github.com/zsh-users/zsh-syntax-highlighting.git # 添加需要的插件 vim ~/.zshrc plugins=( git zsh-syntax-highlighting zsh-autosuggestions ) Copyright © Zhi2014 2023 all right reserved，powered by Gitbook该文件修订时间： 2023-01-03 18:09:26 "},"mac/dash/dash.html":{"url":"mac/dash/dash.html","title":"dash","keywords":"","body":"dash dash-安装 https://kapeli.com/dash mac安装 # 下载安装即可 Copyright © Zhi2014 2023 all right reserved，powered by Gitbook该文件修订时间： 2023-01-03 18:09:26 "}}